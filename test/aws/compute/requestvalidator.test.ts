import { apiGatewayRequestValidator } from "@cdktf/provider-aws";
import { Testing } from "cdktf";
import "cdktf/lib/testing/adapters/jest";
import { AwsStack } from "../../../src/aws/aws-stack";
import { RestApi, Method, RequestValidator } from "../../../src/aws/compute";
import { Template } from "../../assertions";

const environmentName = "Test";
const gridUUID = "123e4567-e89b-12d3";
const providerConfig = { region: "us-east-1" };
const gridBackendConfig = { address: "http://localhost:3000" };

describe("request validator", () => {
  test("default setup", () => {
    // GIVEN
    const app = Testing.app();
    const stack = new AwsStack(app, "MyStack", {
      environmentName,
      gridUUID,
      providerConfig,
      gridBackendConfig,
    });
    const api = new RestApi(stack, "test-api", {
      cloudWatchRole: false,
      deploy: true,
    });
    new Method(stack, "my-method", {
      httpMethod: "POST",
      resource: api.root,
    });

    // WHEN
    new RequestValidator(stack, "my-validator", {
      restApi: api,
      validateRequestBody: true,
      validateRequestParameters: false,
    });

    // THEN
    Template.synth(stack).toHaveResourceWithProperties(
      apiGatewayRequestValidator.ApiGatewayRequestValidator,
      {
        rest_api_id: stack.resolve(api.restApiId),
        validate_request_body: true,
        validate_request_parameters: false,
        // Name is auto-generated by the RequestValidator construct if not provided in props,
        // and the TF provider requires it. We don't assert the auto-generated name here
        // to align with the CDK test which also doesn't assert it when auto-generated.
      },
    );
  });

  test("no deployment", () => {
    // GIVEN
    const app = Testing.app();
    const stack = new AwsStack(app, "MyStack", {
      environmentName,
      gridUUID,
      providerConfig,
      gridBackendConfig,
    });
    const api = new RestApi(stack, "test-api", {
      cloudWatchRole: false,
      deploy: false,
    });
    new Method(stack, "my-method", {
      httpMethod: "POST",
      resource: api.root,
    });

    // WHEN
    new RequestValidator(stack, "my-validator", {
      restApi: api,
      requestValidatorName: "my-validator-custom-name",
      validateRequestBody: false,
      validateRequestParameters: true,
    });

    // THEN
    Template.synth(stack).toHaveResourceWithProperties(
      apiGatewayRequestValidator.ApiGatewayRequestValidator,
      {
        rest_api_id: stack.resolve(api.restApiId),
        name: "my-validator-custom-name",
        validate_request_body: false,
        validate_request_parameters: true,
      },
    );
  });
});
