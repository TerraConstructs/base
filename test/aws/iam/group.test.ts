import { iamGroup } from "@cdktf/provider-aws";
import { App, Testing } from "cdktf";
import "cdktf/lib/testing/adapters/jest";
import { AwsStack } from "../../../src/aws/aws-stack";
import { Group, ManagedPolicy, User } from "../../../src/aws/iam";
import { Annotations, Template } from "../../assertions";
import { TestResource } from "../../test-resource";

// IAM Groups tests using TerraConstructs
describe("IAM groups", () => {
  let app: App;
  let stack: AwsStack;

  beforeEach(() => {
    app = Testing.app();
    stack = new AwsStack(app, "MyStack", {
      environmentName: "Test",
      gridUUID: "test-uuid",
      providerConfig: { region: "us-east-1" },
      gridBackendConfig: { address: "http://localhost" },
    });
  });
  test("default group", () => {
    new Group(stack, "MyGroup");

    // In TerraConstructs the IAM group resource is synthesized as aws_iam_group
    Template.synth(stack).toHaveResource(iamGroup.IamGroup);
  });

  test("users can be added to the group either via user.addToGroup or group.addUser", () => {
    const group = new Group(stack, "MyGroup");
    const user1 = new User(stack, "User1");
    const user2 = new User(stack, "User2");
    user1.addToGroup(group);
    group.addUser(user2);

    // Check that the IAM group is created and both users contain a reference to the group in their Groups property.
    Template.synth(stack).toMatchObject({
      resource: {
        aws_iam_group: {
          // The actual logical id is generated by TerraConstructs; we only check that one exists.
        },
        aws_iam_user: {
          // Both user resources should include a "groups" property referencing the group.
          // Use Jest asymmetric matchers to check that the "groups" array contains a reference string
          User1: {
            groups: [
              expect.objectContaining({
                Ref: expect.stringMatching(/MyGroup/),
              }),
            ],
          },
          User2: {
            groups: [
              expect.objectContaining({
                Ref: expect.stringMatching(/MyGroup/),
              }),
            ],
          },
        },
      },
    });
  });

  test("create with managed policy", () => {
    new Group(stack, "MyGroup", {
      managedPolicies: [
        ManagedPolicy.fromAwsManagedPolicyName(stack, "MyGroupPolicy", "asdf"),
      ],
    });

    // Expect the synthesized IAM group to have a managed_policy_arns property.
    Template.synth(stack).toHaveResourceWithProperties(iamGroup.IamGroup, {
      managed_policy_arns: [
        {
          "Fn::Join": [
            "",
            ["arn:", { Ref: "AWS::Partition" }, ":iam::aws:policy/asdf"],
          ],
        },
      ],
    });
  });

  test("groups imported by group name have valid arn", () => {
    const group1 = Group.fromGroupName(
      stack,
      "imported-group1",
      "MyGroupName1",
    );
    const group2 = Group.fromGroupName(
      stack,
      "imported-group2",
      "division/MyGroupName2",
    );

    expect(stack.resolve(group1.groupArn)).toStrictEqual({
      "Fn::Join": [
        "",
        [
          "arn:",
          { Ref: "AWS::Partition" },
          ":iam::",
          { Ref: "AWS::AccountId" },
          ":group/MyGroupName1",
        ],
      ],
    });
    expect(stack.resolve(group2.groupArn)).toStrictEqual({
      "Fn::Join": [
        "",
        [
          "arn:",
          { Ref: "AWS::Partition" },
          ":iam::",
          { Ref: "AWS::AccountId" },
          ":group/division/MyGroupName2",
        ],
      ],
    });
  });
});

test("cross-env group ARNs include path", () => {
  const app = Testing.app();
  const stackProps = {
    environmentName: "Test",
    gridUUID: "test-uuid",
    providerConfig: { region: "us-east-1" },
    gridBackendConfig: { address: "http://localhost" },
  };
  // env: { account: "123456789012", region: "us-east-1" },
  const groupStack = new AwsStack(app, "group-stack", {
    ...stackProps,
    providerConfig: { region: "us-east-1" },
  });
  // env: { region: "us-east-2" },
  const referencerStack = new AwsStack(app, "referencer-stack", {
    ...stackProps,
    providerConfig: { region: "us-east-2" },
  });
  const group = new Group(groupStack, "Group", {
    path: "/sample/path/",
    groupName: "sample-name",
  });
  new TestResource(referencerStack, "Referencer", {
    properties: { GroupArn: group.groupArn },
  });

  Template.synth(referencerStack).toHaveResourceWithProperties(TestResource, {
    GroupArn: {
      "Fn::Join": [
        "",
        [
          "arn:",
          { Ref: "AWS::Partition" },
          ":iam::123456789012:group/sample/path/sample-name",
        ],
      ],
    },
  });
});

test("throw warning if attached managed policies exceed 10 in constructor", () => {
  const app = Testing.app();
  const stack = new AwsStack(app, "MyStack", {
    environmentName: "Test",
    gridUUID: "test-uuid",
    providerConfig: { region: "us-east-1" },
    gridBackendConfig: { address: "http://localhost" },
  });

  new Group(stack, "MyGroup", {
    groupName: "MyGroup",
    managedPolicies: [
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy0", "0"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy1", "1"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy2", "2"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy3", "3"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy4", "4"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy5", "5"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy6", "6"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy7", "7"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy8", "8"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy9", "9"),
      ManagedPolicy.fromAwsManagedPolicyName(stack, "GroupPolicy10", "10"),
    ],
  });

  // TODO: Warning Ack - [ack: @aws-cdk/aws-iam:groupMaxPoliciesExceeded]
  Annotations.fromStack(stack).hasWarnings({
    message:
      "You added 11 to IAM Group MyGroup. The maximum number of managed policies attached to an IAM group is 10.",
  });
});

test("throw warning if attached managed policies exceed 10 when calling addManagedPolicy", () => {
  const app = Testing.app();
  const stack = new AwsStack(app, "MyStack", {
    environmentName: "Test",
    gridUUID: "test-uuid",
    providerConfig: { region: "us-east-1" },
    gridBackendConfig: { address: "http://localhost" },
  });

  const group = new Group(stack, "MyGroup", {
    groupName: "MyGroup",
  });

  for (let i = 0; i <= 11; i++) {
    group.addManagedPolicy(
      ManagedPolicy.fromAwsManagedPolicyName(
        stack,
        `GroupPolicy${i.toString()}`,
        i.toString(),
      ),
    );
  }

  // TODO: Warning Ack - [ack: @aws-cdk/aws-iam:groupMaxPoliciesExceeded]
  Annotations.fromStack(stack).hasWarnings({
    constructPath: "Default/MyGroup",
    message:
      "You added 12 to IAM Group MyGroup. The maximum number of managed policies attached to an IAM group is 10.",
  });
});
