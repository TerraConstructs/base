// https://github.com/aws/aws-cdk/blob/v2.175.1/packages/aws-cdk-lib/aws-ec2/lib/key-pair.ts

import { keyPair as tfKeyPair } from "@cdktf/provider-aws";
import { privateKey } from "@cdktf/provider-tls";
import { Fn } from "cdktf";
import { Construct } from "constructs";
import { OperatingSystemType } from "./machine-image";
import {
  AwsConstructBase,
  AwsConstructProps,
  IAwsConstruct,
} from "../aws-construct";
import { StringParameter, IStringParameter } from "../storage/parameter";

// /**
//  * The format of the Key Pair
//  */
// export enum KeyPairFormat {
//   /**
//    * A PPK file, typically used with PuTTY.
//    */
//   PPK = "ppk",

//   /**
//    * A PEM file.
//    */
//   PEM = "pem",
// }

/**
 * The type of the key pair.
 */
export enum KeyPairType {
  /**
   * An RSA key.
   */
  RSA = "rsa",

  /**
   * An ED25519 key.
   *
   * Note that ED25519 keys are not supported for Windows instances.
   */
  ED25519 = "ed25519",
}

/**
 * The properties of a Key Pair
 */
export interface KeyPairProps extends AwsConstructProps {
  /**
   * A unique name for the key pair.
   *
   * @default A generated name
   */
  readonly keyPairName?: string;

  /**
   * Creates a unique name beginning with the specified prefix.
   *
   * Conflicts with `keyPairName`. If neither `keyPairName` nor `keyPairNamePrefix` is provided,
   * TerraConstructs will create a unique key name using the `gridUUID` as prefix.
   *
   * @default A generated name
   */
  readonly keyPairNamePrefix?: string;

  // /**
  //  * The format of the key pair.
  //  *
  //  * @default PEM
  //  */
  // readonly format?: KeyPairFormat;

  /**
   * The type of key pair.
   *
   * @default RSA (ignored if keyMaterial is provided)
   */
  readonly type?: KeyPairType;

  /**
   * The public key material.
   *
   * If this is provided the key is considered "imported". For imported
   * keys, it is assumed that you already have the private key material
   * so the private key material will not be returned or stored in
   * AWS Systems Manager Parameter Store.
   *
   * The private key generated by this resource will be stored unencrypted
   * in your Terraform state file.
   *
   * Omitting the publicKeyMaterial for production deployments is not recommended.
   * Instead, generate a private key file outside of Terraform and distribute it
   * securely to the system where Terraform will be run.
   *
   * @default a public and private key will be generated
   */
  readonly publicKeyMaterial?: string;
}

/**
 * Outputs which may be registered for output via the Grid.
 */
export interface KeyPairOutputs {
  /**
   * The unique name of the key pair.
   */
  readonly keyPairName: string;

  /**
   * The type of the key pair.
   *
   * @default no type specified
   */
  readonly type?: KeyPairType;
}

/**
 * Attributes of a Key Pair.
 */
export interface KeyPairAttributes {
  /**
   * The unique name of the key pair.
   */
  readonly keyPairName: string;

  /**
   * The type of the key pair.
   *
   * @default no type specified
   */
  readonly type?: KeyPairType;
}

/**
 * An EC2 Key Pair.
 */
export interface IKeyPair extends IAwsConstruct {
  /** Strongly typed outputs */
  readonly keyPairOutputs: KeyPairOutputs;

  /**
   * The name of the key pair.
   *
   * @attribute
   */
  readonly keyPairName: string;

  /**
   * The type of the key pair.
   */
  readonly type?: KeyPairType;

  /**
   * Used internally to determine whether the key pair is compatible with an OS type.
   *
   * @internal
   */
  _isOsCompatible(osType: OperatingSystemType): boolean;
}

/**
 * An EC2 Key Pair.
 *
 * @resource AWS::EC2::KeyPair
 */
export class KeyPair extends AwsConstructBase implements IKeyPair {
  /**
   * Imports a key pair based on the name.
   */
  public static fromKeyPairName(
    scope: Construct,
    id: string,
    keyPairName: string,
  ): IKeyPair {
    return KeyPair.fromKeyPairAttributes(scope, id, { keyPairName });
  }

  /**
   * Imports a key pair with a name and optional type.
   */
  public static fromKeyPairAttributes(
    scope: Construct,
    id: string,
    attrs: KeyPairAttributes,
  ): IKeyPair {
    class Import extends AwsConstructBase implements IKeyPair {
      public readonly keyPairName: string;
      public readonly type?: KeyPairType;
      public get keyPairOutputs(): KeyPairOutputs {
        return {
          keyPairName: this.keyPairName,
          type: this.type,
        };
      }
      public get outputs(): Record<string, any> {
        return this.keyPairOutputs;
      }

      constructor() {
        super(scope, id);
        this.keyPairName = attrs.keyPairName;
        this.type = attrs.type;
      }

      /**
       * Used internally to determine whether the key pair is compatible with an OS type.
       *
       * @internal
       */
      public _isOsCompatible(osType: OperatingSystemType): boolean {
        switch (this.type) {
          case KeyPairType.ED25519:
            return osType !== OperatingSystemType.WINDOWS;
          case KeyPairType.RSA:
            return true;
          default:
            return true;
        }
      }
    }
    return new Import();
  }

  public get keyPairOutputs(): KeyPairOutputs {
    return {
      keyPairName: this.keyPairName,
      type: this.type,
    };
  }
  public get outputs(): Record<string, any> {
    return this.keyPairOutputs;
  }

  /**
   * The unique name of the key pair.
   *
   * @attribute
   */
  public readonly keyPairName: string;

  /**
   * The fingerprint of the key pair.
   *
   * @attribute
   */
  public readonly keyPairFingerprint: string;

  /**
   * The unique ID of the key pair.
   *
   * @attribute
   */
  public readonly keyPairId: string;

  /**
   * The type of the key pair.
   */
  public readonly type?: KeyPairType;

  // not supported in Terraform
  // /**
  //  * The format of the key pair.
  //  */
  // public readonly format: KeyPairFormat;

  private _privateKey?: privateKey.PrivateKey;
  private _privateKeySsm?: IStringParameter;
  private readonly _isImport: boolean;

  public readonly resource: tfKeyPair.KeyPair;

  constructor(scope: Construct, id: string, props?: KeyPairProps) {
    super(scope, id, props);

    if (props?.keyPairName && props?.keyPairNamePrefix) {
      throw new Error(
        "Cannot specify both 'keyPairName' and 'keyPairNamePrefix'",
      );
    }

    const keyPairNamePrefix =
      props?.keyPairNamePrefix ||
      this.stack.uniqueResourceName(this, {
        prefix: this.gridUUID,
      });

    // Lazy.stringValue({
    //   produce: () => AwsStack.uniqueResourceName(this, { maxLength: 255 }),
    // });

    if (props?.publicKeyMaterial && props?.type) {
      throw new Error("Cannot specify 'type' for keys with imported material");
    }

    this._isImport = !!props?.publicKeyMaterial;

    const keyType = props?.type ?? KeyPairType.RSA;
    let publicKey = props?.publicKeyMaterial;
    if (!publicKey) {
      let algorithm: "RSA" | "ECDSA" | "ED25519";
      switch (keyType) {
        case KeyPairType.ED25519:
          algorithm = "ED25519";
          break;
        case KeyPairType.RSA:
        default:
          algorithm = "RSA";
      }
      this._privateKey = new privateKey.PrivateKey(this, "PrivateKey", {
        algorithm,
      });
      publicKey = Fn.trimspace(this._privateKey.publicKeyOpenssh);
    }

    this.resource = new tfKeyPair.KeyPair(this, "Resource", {
      keyName: props?.keyPairName,
      keyNamePrefix: keyPairNamePrefix,
      // keyFormat: props?.format ?? KeyPairFormat.PEM,
      publicKey,
    });

    this.keyPairName = this.resource.keyName;
    this.keyPairFingerprint = this.resource.fingerprint;
    this.keyPairId = this.resource.id;
    this.type = keyType;
    // this.format = keyFormat;
  }

  /**
   * Whether the key material was imported.
   *
   * Keys with imported material do not have their private key material stored
   * or returned automatically.
   */
  public get hasImportedMaterial(): boolean {
    return this._isImport;
  }

  /**
   * The Systems Manager Parameter Store parameter with the pair's private key material.
   */
  public get privateKey(): IStringParameter {
    if (this._isImport) {
      throw new Error(
        "An SSM parameter with private key material is not created for imported keys",
      );
    }
    if (!this._privateKeySsm) {
      this._privateKeySsm = new StringParameter(this, "PrivateKeyParameter", {
        parameterName: `/ec2/keypair/${this.keyPairId}`,
        description: `Private key for ${this.keyPairName}`,
        sensitiveStringValue: this._privateKey!.privateKeyPem,
      });
    }
    return this._privateKeySsm;
  }

  /**
   * Used internally to determine whether the key pair is compatible with an OS type.
   *
   * @internal
   */
  public _isOsCompatible(osType: OperatingSystemType): boolean {
    switch (this.type) {
      case KeyPairType.ED25519:
        return osType !== OperatingSystemType.WINDOWS;
      case KeyPairType.RSA:
        return true;
      default:
        return true;
    }
  }
}
