// https://github.com/aws/aws-cdk/blob/dd912daf2b91a4a32064341e92863afbd9eeebdd/packages/aws-cdk-lib/aws-iam/lib/group.ts

import {
  iamGroupPolicyAttachment,
  iamGroup as tfIamGroup,
} from "@cdktf/provider-aws";
import { Annotations } from "cdktf";
import { Construct } from "constructs";
import { ArnFormat } from "../arn";
import {
  AwsConstructBase,
  AwsConstructProps,
  IAwsConstruct,
} from "../aws-construct";
import { AwsStack } from "../aws-stack";
import { IIdentity } from "./identity-base";
import { IManagedPolicy } from "./managed-policy";
import { Policy } from "./policy";
import { PolicyStatement } from "./policy-statement";
import {
  AddToPrincipalPolicyResult,
  ArnPrincipal,
  IPrincipal,
  PrincipalPolicyFragment,
} from "./principals";
import { AttachedPolicies } from "./private/util";
import { IUser } from "./user";

/**
 * Outputs which may be registered for output via the Grid.
 */
export interface GroupOutputs {
  readonly arn: string;
  readonly name: string;
}

/**
 * Represents an IAM Group.
 *
 * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html
 */
export interface IGroup extends IIdentity, IAwsConstruct {
  /**
   * strongly typed roleOutputs
   *
   * @attribute
   */
  readonly groupOutputs: GroupOutputs;

  /**
   * Returns the IAM Group Name
   *
   * @attribute
   */
  readonly groupName: string;

  /**
   * Returns the IAM Group ARN
   *
   * @attribute
   */
  readonly groupArn: string;
}

/**
 * Properties for defining an IAM group.
 */
export interface GroupProps extends AwsConstructProps {
  /**
   * A name for the IAM group. For valid values, see the GroupName parameter
   * for the CreateGroup action in the IAM API Reference. If you don't specify
   * a name, a unique physical name will be generated.
   *
   * @default Generated by the framework (recommended)
   */
  readonly groupName?: string;

  /**
   * A list of managed policies to associate with this group.
   *
   * You can later add managed policies by calling addManagedPolicy.
   *
   * @default - No managed policies.
   */
  readonly managedPolicies?: IManagedPolicy[];

  /**
   * The path to the group. For more information about paths, see
   * "IAM Identifiers" in the IAM User Guide.
   *
   * @default "/"
   */
  readonly path?: string;
}

/**
 * Base class for IAM Groups.
 */
abstract class GroupBase extends AwsConstructBase implements IGroup {
  public abstract readonly groupName: string;
  public abstract readonly groupArn: string;
  public get groupOutputs(): GroupOutputs {
    return {
      arn: this.groupArn,
      name: this.groupName,
    };
  }
  public get outputs(): Record<string, any> {
    return this.groupOutputs;
  }

  public readonly grantPrincipal: IPrincipal = this;
  public readonly principalAccount: string | undefined = this.env.account;
  public readonly assumeRoleAction: string = "sts:AssumeRole";

  private readonly attachedPolicies = new AttachedPolicies();
  private defaultPolicy?: Policy;

  public get policyFragment(): PrincipalPolicyFragment {
    return new ArnPrincipal(this.groupArn).policyFragment;
  }

  /**
   * Attaches an inline policy to this group.
   * @param policy The policy to attach.
   */
  public attachInlinePolicy(policy: Policy): void {
    this.attachedPolicies.attach(policy);
    policy.attachToGroup(this);
  }

  /**
   * Adds a managed policy to this group.
   * (Note: In TerraConstructs managed policies are attached separately so this method just tracks them.)
   */
  public addManagedPolicy(_policy: IManagedPolicy): void {
    // No-op here; managed policies are attached externally via separate resources.
  }

  /**
   * Adds a user to this group.
   */
  public addUser(user: IUser): void {
    user.addToGroup(this);
  }

  /**
   * Adds an IAM statement to the default policy.
   */
  public addToPrincipalPolicy(
    statement: PolicyStatement,
  ): AddToPrincipalPolicyResult {
    if (!this.defaultPolicy) {
      this.defaultPolicy = new Policy(this, "DefaultPolicy");
      this.defaultPolicy.attachToGroup(this);
    }
    this.defaultPolicy.addStatements(statement);
    return { statementAdded: true, policyDependable: this.defaultPolicy };
  }

  public addToPolicy(statement: PolicyStatement): boolean {
    return this.addToPrincipalPolicy(statement).statementAdded;
  }
}

/**
 * An IAM Group (a collection of IAM users) which lets you specify permissions for multiple users.
 *
 * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html
 */
export class Group extends GroupBase {
  /**
   * Import an external group by ARN.
   *
   * Note: If the imported Group ARN is a Token and contains a path,
   * the groupName property may not resolve correctly. In that case supply an ARN without a path.
   *
   * @param scope construct scope
   * @param id construct id
   * @param groupArn the ARN of the group to import (e.g. arn:aws:iam::account-id:group/group-name)
   */
  public static fromGroupArn(
    scope: Construct,
    id: string,
    groupArn: string,
  ): IGroup {
    const arnComponents = AwsStack.ofAwsConstruct(scope).splitArn(
      groupArn,
      ArnFormat.SLASH_RESOURCE_NAME,
    );
    const groupName = arnComponents.resourceName!;
    class Import extends GroupBase {
      public groupName = groupName;
      public groupArn = groupArn;
      public principalAccount = arnComponents.account;
    }
    return new Import(scope, id);
  }

  /**
   * Import an existing group by given name (including path).
   *
   * @param scope construct scope
   * @param id construct id
   * @param groupName the full group name (with path) of the existing group to import
   */
  public static fromGroupName(
    scope: Construct,
    id: string,
    groupName: string,
  ): IGroup {
    const groupArn = AwsStack.ofAwsConstruct(scope).formatArn({
      service: "iam",
      region: "",
      resource: "group",
      resourceName: groupName,
    });
    return Group.fromGroupArn(scope, id, groupArn);
  }

  public readonly groupName: string;
  public readonly groupArn: string;

  private readonly managedPolicies: IManagedPolicy[] = [];

  private readonly physicalName: string;
  constructor(scope: Construct, id: string, props: GroupProps = {}) {
    super(scope, id, props);
    this.physicalName =
      props.groupName ||
      this.stack.uniqueResourceName(this, {
        prefix: this.gridUUID,
      });

    if (props.managedPolicies) {
      this.managedPolicies.push(...props.managedPolicies);
    }

    // Create the IAM Group using Terraform AWS Provider's IAM Group.
    const groupResource = new tfIamGroup.IamGroup(this, "Resource", {
      name: this.physicalName,
      path: props.path,
    });

    this.groupName = groupResource.name;
    this.groupArn = groupResource.arn;
    // this.getResourceArnAttribute(groupResource.arn, {
    //   region: "", // IAM is global per partition.
    //   service: "iam",
    //   resource: "group",
    //   resourceName: `${props.path ? (props.path.startsWith("/") ? props.path.substring(1) : props.path) : ""}${this.physicalName}`,
    // });

    this.managedPoliciesExceededWarning();
  }

  /**
   * Attaches a managed policy to this group.
   * @param policy The managed policy to attach.
   */
  public addManagedPolicy(policy: IManagedPolicy): void {
    if (this.managedPolicies.indexOf(policy) >= 0) {
      return;
    }
    this.managedPolicies.push(policy);
    this.managedPoliciesExceededWarning();
  }

  private managedPoliciesExceededWarning(): void {
    if (this.managedPolicies.length > 10) {
      // "@aws-cdk/aws-iam:groupMaxPoliciesExceeded",
      Annotations.of(this).addWarning(
        `You added ${this.managedPolicies.length} managed policies to IAM Group ${this.physicalName}. The maximum number of managed policies attached to an IAM group is 10.`,
      );
    }
  }
  /**
   * Adds resource to the terraform JSON output.
   *
   * called by TerraformStack.prepareStack()
   */
  public toTerraform(): any {
    /**
     * A preparing resolve run might add new resources to the stack
     *
     * should not add resources if `force` is `false` and the policy
     * document is empty or not attached
     * ref: https://github.com/aws/aws-cdk/blob/v2.143.0/packages/aws-cdk-lib/aws-iam/lib/policy.ts#L149
     */
    if (this.managedPolicies.length === 0) {
      return {};
    }

    // add iamGroupPolicyAttachment resource for each referenced ManagedPolicy
    // NOTE: The TerraformDependendableAspect will propgate construct dependencies on this policy to its IamRolePolicy resources
    // not sure if time.sleep is still necessary?
    // https://github.com/pulumi/pulumi-aws/issues/2260#issuecomment-1977606509
    // else need: https://github.com/hashicorp/terraform-provider-aws/issues/29828#issuecomment-1693307500
    for (let i = 0; i < this.managedPolicies.length; i++) {
      const id = `ResourceManagedPolicy${i}`; // unique id for each managed policy
      // ignore if already generated
      if (this.node.tryFindChild(id)) continue;

      new iamGroupPolicyAttachment.IamGroupPolicyAttachment(this, id, {
        group: this.groupName,
        policyArn: this.managedPolicies[i].managedPolicyArn,
      });
    }
    return {};
  }
}
