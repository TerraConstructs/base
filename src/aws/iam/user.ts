// https://github.com/aws/aws-cdk/blob/f9f3681be9fc6a0c998cd26119053c5832ef9806/packages/aws-cdk-lib/aws-iam/lib/user.ts

import { Construct } from "constructs";
import { AwsConstructBase, AwsConstructProps } from "../aws-construct";
import { Stack } from "../aws-stack";
import * as iam from "../iam";
import { IamUser } from "../iam/iam-user";
import { CfnUserToGroupAddition } from "../iam/iam.generated";
import { IGroup } from "./group";
import { IManagedPolicy } from "./managed-policy";
import { Policy } from "./policy";
import { PolicyStatement } from "./policy-statement";
import {
  AddToPrincipalPolicyResult,
  ArnPrincipal,
  IPrincipal,
  PrincipalPolicyFragment,
} from "./principals";
import { AttachedPolicies, undefinedIfEmpty } from "./private/util";
import { Arn, ArnFormat, Lazy, SecretValue } from "../../core";

/**
 * Represents an IAM user.
 */
export interface IUser extends iam.IIdentity {
  /**
   * The user's name.
   *
   * @attribute
   */
  readonly userName: string;

  /**
   * The user's ARN.
   *
   * @attribute
   */
  readonly userArn: string;

  /**
   * Adds this user to a group.
   */
  addToGroup(group: IGroup): void;
}

/**
 * Properties for defining an IAM user.
 */
export interface UserProps extends AwsConstructProps {
  /**
   * Groups to add this user to.
   *
   * @default - No groups.
   */
  readonly groups?: IGroup[];

  /**
   * Managed policies to attach to this user.
   *
   * @default - No managed policies.
   */
  readonly managedPolicies?: IManagedPolicy[];

  /**
   * The path for the user name.
   *
   * @default "/"
   */
  readonly path?: string;

  /**
   * The managed policy to use as the permissions boundary.
   *
   * @default - No permissions boundary.
   */
  readonly permissionsBoundary?: IManagedPolicy;

  /**
   * A name for the IAM user.
   *
   * @default - Generated by CloudFormation.
   */
  readonly userName?: string;

  /**
   * The password for the user.
   *
   * Use SecretValue.unsafePlainText for a plain text password, or reference a secret.
   *
   * @default - No console access.
   */
  readonly password?: SecretValue;

  /**
   * If true, the user must reset the password upon first signâ€“in.
   *
   * @default false
   */
  readonly passwordResetRequired?: boolean;
}

/**
 * Attributes for importing an existing IAM user.
 */
export interface UserAttributes {
  /**
   * The ARN of the user.
   *
   * Format: arn:<partition>:iam::<account-id>:user/<user-name-with-path>
   */
  readonly userArn: string;
}

/**
 * Defines a new IAM user.
 */
export class User extends AwsConstructBase implements IUser {
  // Static import methods

  /**
   * Import an existing user given a username.
   */
  public static fromUserName(
    scope: Construct,
    id: string,
    userName: string,
  ): IUser {
    const userArn = Stack.of(scope).formatArn({
      service: "iam",
      region: "",
      resource: "user",
      resourceName: userName,
    });
    return User.fromUserAttributes(scope, id, { userArn });
  }

  /**
   * Import an existing user given a user ARN.
   */
  public static fromUserArn(
    scope: Construct,
    id: string,
    userArn: string,
  ): IUser {
    return User.fromUserAttributes(scope, id, { userArn });
  }

  /**
   * Import an existing user given user attributes.
   */
  public static fromUserAttributes(
    scope: Construct,
    id: string,
    attrs: UserAttributes,
  ): IUser {
    class Import extends AwsConstructBase implements IUser {
      public readonly grantPrincipal: IPrincipal = this;
      public readonly principalAccount = Stack.of(scope).splitArn(
        attrs.userArn,
        ArnFormat.SLASH_RESOURCE_NAME,
      ).account;
      // Extract the user name from the ARN. For a user ARN, the resource part includes the path.
      public readonly userName: string = Arn.extractResourceName(
        attrs.userArn,
        "user",
      )
        .split("/")
        .pop()!;
      public readonly userArn: string = attrs.userArn;
      public readonly assumeRoleAction: string = "sts:AssumeRole";
      public readonly policyFragment: PrincipalPolicyFragment =
        new ArnPrincipal(attrs.userArn).policyFragment;

      public addToGroup(_group: IGroup): void {
        throw new Error("Cannot add group membership on an imported user.");
      }
    }
    return new Import(scope, id);
  }

  public readonly grantPrincipal: IPrincipal = this;
  public readonly principalAccount: string | undefined = this.env.account;
  public readonly assumeRoleAction: string = "sts:AssumeRole";

  /**
   * The IAM user's name.
   * @attribute
   */
  public readonly userName: string;

  /**
   * The IAM user's ARN.
   * @attribute
   */
  public readonly userArn: string;

  /**
   * The permissions boundary assigned to this user.
   */
  public readonly permissionsBoundary?: IManagedPolicy;

  public readonly policyFragment: PrincipalPolicyFragment;

  private readonly groups: string[] = [];
  private readonly managedPolicies: IManagedPolicy[] = [];
  private readonly attachedPolicies = new AttachedPolicies();
  private defaultPolicy?: Policy;
  private groupId = 0;

  constructor(scope: Construct, id: string, props: UserProps = {}) {
    super(scope, id, { physicalName: props.userName, ...props });

    if (props.managedPolicies) {
      this.managedPolicies.push(...props.managedPolicies);
    }
    this.permissionsBoundary = props.permissionsBoundary;

    const userResource = new IamUser(this, "Resource", {
      name: this.physicalName,
      path: props.path,
      permissionsBoundary: this.permissionsBoundary
        ? this.permissionsBoundary.managedPolicyArn
        : undefined,
      managedPolicyArns: Lazy.list(
        {
          produce: () => this.managedPolicies.map((mp) => mp.managedPolicyArn),
        },
        { omitEmpty: true },
      ),
      forceDestroy: false,
      loginProfile: this.parseLoginProfile(props),
      tags: undefinedIfEmpty(() => this.tags),
    });

    this.userName = this.getResourceNameAttribute(userResource.ref);
    this.userArn = this.getResourceArnAttribute(userResource.arn, {
      region: "",
      service: "iam",
      resource: "user",
      // Remove a leading slash from the path if present.
      resourceName: `${props.path ? props.path.replace(/^\//, "") : ""}${this.physicalName}`,
    });

    this.policyFragment = new ArnPrincipal(this.userArn).policyFragment;

    if (props.groups) {
      props.groups.forEach((g) => this.addToGroup(g));
    }
  }

  /**
   * Adds this user to the specified group.
   */
  public addToGroup(group: IGroup): void {
    new CfnUserToGroupAddition(this, `${this.userName}-Group${this.groupId}`, {
      groupName: group.groupName,
      users: [this.userName],
    });
    this.groupId++;
    this.groups.push(group.groupName);
  }

  /**
   * Attaches a managed policy to the user.
   */
  public addManagedPolicy(policy: IManagedPolicy): void {
    if (this.managedPolicies.find((mp) => mp === policy)) {
      return;
    }
    this.managedPolicies.push(policy);
  }

  /**
   * Attaches an inline policy to the user.
   */
  public attachInlinePolicy(policy: Policy): void {
    this.attachedPolicies.attach(policy);
    policy.attachToUser(this);
  }

  /**
   * Adds an IAM statement to the default inline policy.
   *
   * If no default policy exists yet, one is created.
   */
  public addToPrincipalPolicy(
    statement: PolicyStatement,
  ): AddToPrincipalPolicyResult {
    if (!this.defaultPolicy) {
      this.defaultPolicy = new Policy(this, "DefaultPolicy");
      this.defaultPolicy.attachToUser(this);
    }
    this.defaultPolicy.addStatements(statement);
    return { statementAdded: true, policyDependable: this.defaultPolicy };
  }

  public addToPolicy(statement: PolicyStatement): boolean {
    return this.addToPrincipalPolicy(statement).statementAdded;
  }

  private parseLoginProfile(
    props: UserProps,
  ): IamUser["loginProfile"] | undefined {
    if (props.password) {
      return {
        password: props.password.unsafeUnwrap(),
        passwordResetRequired: props.passwordResetRequired,
      };
    }
    if (props.passwordResetRequired) {
      throw new Error('Cannot set "passwordResetRequired" without a password.');
    }
    return undefined;
  }
}
